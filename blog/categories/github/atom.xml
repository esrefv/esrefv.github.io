<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Viduslu]]></title>
  <link href="http://esrefv.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://esrefv.github.io/"/>
  <updated>2016-11-08T10:11:26+03:00</updated>
  <id>http://esrefv.github.io/</id>
  <author>
    <name><![CDATA[E. VIDUSLU]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby ile Github-Bitbucket Arasında Çift Yönlü Repository Aktarımı Yapan Script]]></title>
    <link href="http://esrefv.github.io/blog/2016/11/05/ruby-ile-github-bitbucket-arasinda-cift-yonlu-reposityory-aktarimi-yapan-script/"/>
    <updated>2016-11-05T19:00:59+03:00</updated>
    <id>http://esrefv.github.io/blog/2016/11/05/ruby-ile-github-bitbucket-arasinda-cift-yonlu-reposityory-aktarimi-yapan-script</id>
    <content type="html"><![CDATA[<p>Öncelikle başlık biraz uzun oldu arkadaşlar kusura bakmayın :D İlk olarak benden Bitbucket üzerinde bulunan projelerinin Github'a aktarma işlemi için bir script yazmam istendiğinde nasıl yapacağım konusunda en ufak bir fikrim yoktu ve ruby dünyasında çok yeniyim.</p>

<!-- more -->


<p>Sonrasında burada da yazağım gibi adım adım ilerleyerek mükemmel olmasada kullanılabilir bir script ortaya çıkartmaya çalıştım. Kodu bu yazıyı yazmadan önce bitirmiş olduğumdan elimden geldiğince iyileştirme yapmaya çalıştım fakat biraz daha temizlenip düzenlenebileceğine inanıyorum. Umarım işinizi görür.</p>

<h1>Var olan repositorylerimizin, taşınacak alandaki remoteların listelenmesi</h1>

<p>directoryname adını verdiğim bir değişkende oluşturulacak olan klasörün adını tutacağım ve rubyde &lsquo;Dir&rsquo; sınıfını kullanacağız.</p>

<pre><code>directoryname = "bitbucketproject"
Dir.mkdir(directoryname) unless File.exists?(directoryname)
</code></pre>

<p>Dir.mkdir sayesinde &ldquo;bitbucketproject&rdquo; adında klasörümüz oluşuyor. Ben ubuntu kulladığım için &lsquo;home&rsquo; klasörü altında oluşuyor.</p>

<p>Klonlayacağımız repolarımızı ve taşıyacağımız alandaki repositorylere ait remotelar repo_remote_list adını verdiğimiz array içinde tutuyoruz.</p>

<pre><code>repo_list = 
[["git clone git@github.com:github/example1.git", "git clone git@github.com:github/example1.git"],
["git clone git@bitbucket.org:bitbucket/example2.git","git clone git@bitbucket.org:bitbucket/example2.git"]]
</code></pre>

<p>Örnek olarak verdiğim listede terminal üzerinde nasıl clone işlemi yapıyorsak o şekilde yazıyoruz taşımak istediğimiz repoları, taşıyacağımız alana ait remoteları da ikili liste şeklinde hangi repomuzu hangi &lsquo;remote&rsquo; a taşımak istiyorsak yanına belirtiyoruz.</p>

<pre><code class="ruby">        directoryname = "bitbucketproject"
    Dir.mkdir(directoryname) unless File.exists?(directoryname)

    repo_remote_list = 
    [
    ["git clone git@github.com:github/example1.git", "git remote add origin git@bitbucket.org:bitbucket/example1.git"],
    ["git clone git@bitbucket.org:bitbucket/example2.git", "git remote add origin git@github.com:github/example2.git"],
    ["git clone git@bitbucket.org:bitbucket/example3.git", "git remote add origin git@github.com:github/example3.git"],
    ["git clone git@github.com:github/example4.git", "git remote add origin git@bitbucket.org:bitbucket/example4.git"], 
    ["git clone git@bitbucket.org:bitbucket/example5.git", "git remote add origin git@github.com:github/example5.git"],
    ["git clone git@github.com:github/example6.git", "git remote add origin git@bitbucket.org:bitbucket/example6.git"]
    ]
</code></pre>

<p>Genel olarak kodumuz bu şekildedir.</p>

<h1>Var olan repositorylerimize &lsquo;mirror&rsquo; eklenmesi ve klasör içine klonlama işlemi</h1>

<p>Bu aşamada &lsquo;mirror&rsquo; işlemi bize, yeni alana taşıyacağımız repositorylerimizin tüm branchleri ile taşımıza yardımcı olacak olan büyülü bir kelime.(Bende yeni öğrendim ve kullanıyorum :D)</p>

<p>Bunun kullanılma şekli klon aşamasında kodumuz şu şekilde olmalı,</p>

<pre><code>"git clone --mirror git@github.com:github/example1.git"
</code></pre>

<p>fakat ben kullanıcının bunu yazarak zaman kaybetmesini istemediğim için kullanıcı sadece clone repoyu ve remote repoyu yazacak gerisini biz halledeceğiz.</p>

<pre><code class="ruby">    repo_count = 0 
    repo_remote_list.each do |repo|
        repo_first = repo[0].rpartition(' ').first &lt;&lt; " --mirror "  
        repo_last  = repo[0].rpartition(' ').last
        repo_remote_list[repo_count][0] = repo_first + repo_last
        repo_count += 1
    end
</code></pre>

<p>Onun içinde bu şekilde bir kod yazıyoruz. Bu &lsquo;rpartition(&rsquo; &lsquo;) kodu,</p>

<pre><code>'git clone'  
'git@github.com:github/example1.git' 
</code></pre>

<p>şeklinde klonalanacak olan repomuzu ikiye bölüyor. Bizim ise ilk bölümün yanına &ldquo; &ndash;mirror &rdquo; büyülü sözcüğünü eklemek. Bu işlemide yaparak repo_remote_list imizi yenilemiş oluyoruz. Şimdide klonlayalım.</p>

<pre><code class="ruby">    repo_remote_list.each do |repo|
        Dir.chdir(directoryname) do
            system repo[0]  
        end
    end
</code></pre>

<h1>Yeni remote ları eklemek için klonlanan dosyaları listeleme</h1>

<p>Bu işlemin yapıla bilmesi için tek tek klasörlerin içerisine girilerek &lsquo;git&rsquo; kodu çalıştırılması gerekiyor. &lsquo;directoryname&rsquo; içerisinde bulunan tüm dosyaları listeleyen bir &lsquo;Dir&rsquo; kodu var.</p>

<pre><code class="ruby">    files = Dir.glob(directoryname + "/*")
    files_change = Dir.glob(directoryname + "/*")
</code></pre>

<p>&lsquo;Dir&rsquo; glob belirttiğimiz path içerisindeki dosyaları listeliyor bize. Fakat listeleme tarzı &lsquo;direcktoryname/filename&rsquo; bizde => &lsquo;bitbucketproject/example1&rsquo; şeklinde olduğu için tek tek içerisini gezme açısında güzel, ayrıca bize sadece dosya adı olan &lsquo;example1&rsquo; de lazım olduğundan neden iki tane kullanıyoruz diye düşünebilirsiniz, sıra onda :)</p>

<pre><code class="ruby">    files_change.each do |file_change|
        file_change.slice! directoryname + "/"
    end
</code></pre>

<p>Bu kod sayesinde files_change içerisinde sadece klasör isimlerini tutuyoruz. Yaptığı işlem ise &lsquo;bitbucketproject/example1&rsquo; şeklinde olan listedeki verilerin önünden &lsquo;bitbucketproject/&rsquo; ı siliyor ve bize sadece klasör isimlerini bırakıyor.</p>

<h1>Yeni bir remote listesi oluşturma zorunluluğu</h1>

<p>Genel olarak tekli ve ikili olarak test ettiğim bu scriptte çoğul bir deneme yaptığımda klonlanan reponun klasör isminin baş harfine göre bir sapma yaşanıyor ve klonlanan repo başka bir repoya pushlanabiliyordu.</p>

<p>Fakat merak etmeyin kullanıcı sadece repo_remote_list i sırayla girdikten sonra başka bir işlem yapmasına gerek kalmadan biz sıralamayı kodla halledeceğiz.</p>

<pre><code class="ruby">    new_repo_remote_list = Array.new
    new_repo_count = 0  
    files_change.each do |fileschange|
        repo_remote_list.each  do |repolist|
            if repolist[0].include? fileschange
                new_repo_remote_list[new_repo_count] =  repolist[1] 
                new_repo_count += 1
            end
        end
    end
</code></pre>

<p>Kodumuz bu şekilde. Nasıl çalıştığına gelirsek. files_change bizim &lsquo;example1&rsquo; şeklinde tuttuğumuz klonlanan repolarımızın dosya adı listesi. Ve files_change klasörlerimizi okuduğu sıralamayla bize dosya adı listesi yaratıyor. Bu önemli!! repo_remote_list &lsquo;repolist[0]&rsquo; klonlanacak olan repolarımızın sıralı listesi.</p>

<pre><code class="ruby">    files_change.each do |fileschange|

    end
</code></pre>

<p>Bu blokta klasörlerin okunduğu sırada dosyaları gezeceğiz.</p>

<pre><code class="ruby">    files_change.each do |fileschange|
        repo_remote_list.each  do |repolist|
            if repolist[0].include? fileschange

            end
        end
    end
</code></pre>

<p>repolist[0]  ise ilk sırada klonlamak istediğimiz sırada girdiğimiz repository listemiz ve bunları gezeceğiz. Neden mi? Çünkü bu sıra bizim taşıyacağımız yer için kullacağımız &lsquo;remote&rsquo; lar ile aynı olan sıra ve taşıyacağınız yerin repository adı aynı olmak zorunda değil.</p>

<p>repolist[0] in ilk sırasında &ldquo;github/example1.git&rdquo; var bu klonladığımız repository. Klasörümüzün adı ise example1 , repolist[1] imizde ise ilk sırada &ldquo;bitbucket/example1.git&rdquo; var buda yeni göndereceğimiz repository.
<code>ruby
    files_change.each do |fileschange|
        repo_remote_list.each  do |repolist|
            if repolist[0].include? fileschange
                new_repo_remote_list[new_repo_count] =  repolist[1]
                new_repo_count += 1
            end
        end
    end
</code>
Belirttiğim gibi klon aşamasında klasör isimlerine göre sıralama değişiyor. if koşulu -> repolist[0] in ilk sırasındaki veride &ldquo;files_change&rdquo; klasör adı geçiyormu diye bakıyoruz. Eğer geçiyorsa new_repo_remote_list[new_repo_count] dan başlayarak eşleşmeleri içerisine ekle.</p>

<p>Ve sonunda new_remote_list olarak adlandırdığımız okunan klasör sırasına göre yeni bir remote listemiz oluştu.</p>

<p>Örnek ;</p>

<pre><code>repo_list = 
["git clone git@github.com:github/example1.git", ...]
fileschange = "example1"

"git clone git@github.com:github/example1.git" içerisinde "example1" geçiyormu?
</code></pre>

<p>Şeklinde files_change okunan dosyaların listesi olduğu için ilk sırada &lsquo;example4&rsquo; te olabilirdi.</p>

<h1>Yeni remote ları repolarımıza ekleyelim</h1>

<p>Biz projelerimizi tüm commitleri ve varsa tüm brachleri ile pushlamayı istiyoruz. Klonlanan projelerin &lsquo;origin remote&rsquo; ları klonlanan yer neresi ise orası kalıyor. Biz onuda silmeden origin_two isminde yeni bir remote ekleyeceğiz.</p>

<pre><code class="ruby">    new_repo_remote_list.each do |new_remote|   
        new_remote.gsub! 'origin', 'origin_two' 
    end
</code></pre>

<p>Remote listemizi &lsquo;origin_two&rsquo; olacak şekilde düzenliyoruz.
<code>ruby
    remote_count = 0
    files.each do |file|
        Dir.chdir(file) do          
            remote = new_repo_remote_list[remote_count]                     
            system 'git remote -v'
            system remote
            system 'git remote -v'                  
        end
        remote_count +=1
    end
</code>
Bu kodda tek tek dosyalarımıza girerek &lsquo;git remote add origin_two &rsquo; kodunu çalıştıracak. &lsquo;git remote -v&rsquo; ise eklenmeden önceki ve sonraki halini ekrana basacak.</p>

<h1>Yeni repomuza pushluyoruz ve origin_two remote unu siliyoruz</h1>

<pre><code class="ruby">    files.each do |file|
        Dir.chdir(file) do           
            system 'git push --all origin_two'              
        end     
    end

    remote_remove = 0
    files.each do |file|
        Dir.chdir(file) do
            remote = new_repo_remote_list[remote_remove]
            system 'git remote -v'
            system 'git remote remove origin_two'   
        end
    remote_remove += 1          
    end
</code></pre>

<p>Bu kodda ilk döngüde o anda var olan tüm branchleri pushluyoruz.</p>

<p>İkinci döngüde ise &lsquo;git remote remove&rsquo; ile origin_two remoteumuzu kaldırıyoruz. Aslında kaldırmamızı gerektiren bir durum yok isterseniz kaldırmaya bilirsiniz.</p>

<p>Elimden geldiğince açıklamaları ile anlatmaya çalıştım. Yazı biraz fazla uzun oldu başlık gibi :D Okuduğunuz için teşekkürler.</p>

<p>Tam koda <a href="https://gist.github.com/esrefv">buradan</a> ulaşabilirsiniz adı ise &ldquo;reposync.rb&rdquo; direk kodun sayfasını veremiyorum çünkü istenen bir değişiklik yada güncelleme olduğunda burada sayfayı güncellemem gerekiyor bu şekilde daha kolay ulaşabilirsiniz. İyi günler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Kurulumu Nasıl Yapılır ve Nasıl Github Pages Deploy Edilir?]]></title>
    <link href="http://esrefv.github.io/blog/2016/10/03/octopress-kurulumu-nasil-yapilir-ve-nasil-github-pages-deploy-edilir/"/>
    <updated>2016-10-03T10:32:01+03:00</updated>
    <id>http://esrefv.github.io/blog/2016/10/03/octopress-kurulumu-nasil-yapilir-ve-nasil-github-pages-deploy-edilir</id>
    <content type="html"><![CDATA[<p>Octopress statik bir site yönetimi sağlayan blog framework üdür. Terminalden yönettiğimiz blogumuzu Github pages deploy ederek aktif hale getirceğiz yazımda. Öncelikle &ldquo;Octopress&rdquo; i klonlamamız gerekiyor.</p>

<pre><code class="bash">$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<!-- more -->


<p><strong>Rake install</strong></p>

<p>Sırada ise default tema ve postlarımız için gerekli olan klasörleri bize sağlayacak olan kodu çalıştıracağız.</p>

<pre><code class="bash">$ rake install
</code></pre>

<p>Eğer aşağıdaki gibi bir hata alırsak;</p>

<pre><code class="bash">rake aborted!
Gem::LoadError: ...
</code></pre>

<p>&ldquo;rake install&rdquo; örneğindeki gibi &ldquo;rake&rdquo;  yazarak kullanacağımız bütün işlemlerin başına &ldquo;bundle exec&rdquo; yazmamız gerekecektir.</p>

<pre><code class="bash">$ bundle exec rake install
</code></pre>

<p><strong>İlk Postumuzu oluşturalım</strong></p>

<p>Post oluşturmak için aşağıdaki kodu yazıyoruz.</p>

<pre><code class="bash">$ bundle exec rake new_post
Enter a title for your post: Deneme 
</code></pre>

<p>Postumuzun adı için birşeyler yazıyoruz ve ilk postumuzu oluşturmuş oluyoruz. Ben &ldquo;Deneme&rdquo; adında bir post oluşturdum.</p>

<p>Bu ilk postumuz source klasörünün altında bulunan _posts klasörünün içinde bulunuyor ve <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> syntax ile yazılması gerekiyor.</p>

<pre><code class="bash">$ cd source/_posts 
</code></pre>

<p>yazarak postlarımıza ulaşıyoruz. Subl, atom, rubymine vb. araçlarla açarak yönetebiliriz postumuzu.</p>

<pre><code class="bash">---
layout: post
title: "Deneme"
date: 2016-10-03 09:26:18 +0300
comments: true
categories: 
---
</code></pre>

<p>Karşımıza bu şekilde başlayan bir sayfa açılacaktır. Bunun altına Markdown syntax ile yazdığımız yazımızı ekleyerek paylaşabiliyor olacağız.</p>

<p>Kategori aşamasını da aşağıda şekilde yazarak oluşturabiliyoruz.</p>

<pre><code class="bash">categories: [octopress, github, github pages]
</code></pre>

<p><strong>Sitemizi &ldquo;Generate&rdquo; Edelim</strong></p>

<p>Yaptığımız değişikliklerden sonra <em>generate</em> komutunu çalıştırmalıyız ki değişiklikler oluşturulsun.</p>

<pre><code class="bash">$ bundle exec rake generate
## Generating Site with Jekyll
directory source/stylesheets
    write source/stylesheets/screen.css
Configuration file: /home/esref/Documents/octopress/_config.yml
            Source: source
       Destination: public
      Generating... 
                    done.
</code></pre>

<p><strong>Sitemizi Önizleme Şeklinde Görüntüleyelim</strong></p>

<p>Oluşturduğumuz sitemizi local olarak görüntüleyebileceğiz.</p>

<pre><code class="bash">$ bundle exec rake preview
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
Configuration file: /home/esref/Documents/octopress/_config.yml
&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop.
            Source: source
       Destination: public
      Generating... 
[2016-10-03 09:45:32] INFO  WEBrick 1.3.1
[2016-10-03 09:45:32] INFO  ruby 2.3.0 (2015-12-25) [x86_64-linux]
[2016-10-03 09:45:32] INFO  WEBrick::HTTPServer#start: pid=20926 port=4000
                    done.
 Auto-regeneration: enabled for 'source'
    write public/stylesheets/screen.css
</code></pre>

<p><a href="http://localhost:4000/">http://localhost:4000/</a> sayfasında sitemizi görütüleyebiliriz. Sitemiz aşağıdaki şekildi görüntülene bilecektir.</p>

<p><img src="http://i.hizliresim.com/yV9Eoy.png" alt="Örnek Resim" /></p>

<p><strong>Octopress'in Yapılandırılması(Configuring)</strong></p>

<p>Site adı, açıklama vb. bir çok değişikliği ve ayarları yapabileceğiniz dosya &ldquo;_config.yml&rdquo; dosyasıdır. Bu dosyaya da subl, atom vb. şekilde açtığınız klasörlerin kök dizininden ulaşabilirsiniz.</p>

<pre><code class="bash"># ----------------------- #
#      Main Configs       #
# ----------------------- #

url: http://deneme.github.io
title: My Octopress Blog
subtitle: A blogging framework for hackers.
author: Your Name
simple_search: https://www.google.com/search
description:
</code></pre>

<p>Dosyaya ulaştığımızda öncelikle değiştirmemiz gereken url: kısmıdır çünkü repository mize hangi adı verdiysek o şekilde olmalıdır. Nasıl
repository oluşturcağımızıda aşağıda anlatıyorum.</p>

<p><strong>Sitemizi Github'a Deploy Etme</strong></p>

<p>Yeni bir github repository oluşturmalıyız. Kişisel blogunuzu oluşturuyorsanız benim gibi aşağıdaki şekilde repo ismi verebilirsiniz.</p>

<pre><code class="bash">esrefv.github.io
</code></pre>

<p>Sonrasında &ldquo;rake setup_github_pages&rdquo; çalıştırıyoruz,
<code>bash
$ bundle exec rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git)
           or 'https://github.com/your_username/your_username.github.io')
Repository url:
</code>
Örnek olarak belirttiği şekilde &ldquo;git@github.com:username/username.github.com.git&rdquo; kendi repo umuzu yazıyoruz.</p>

<p>Son olarak aşağıdaki kodları sırasıyla çalıştırarak blogumuzu Github'a deploy işlemimizi bitirmiş oluyoruz.</p>

<pre><code class="bash">$ bundle exec rake generate
$ git add .
$ git commit -m "First deploy to github." 
$ git push origin source
$ bundle exec rake deploy
</code></pre>

<p>Okuduğunuz için teşekkür ederim.</p>

<p>Kaynak Siteler;</p>

<p><a href="http://octopress.org/">http://octopress.org/</a>
<a href="https://daringfireball.net/projects/markdown/syntax">https://daringfireball.net/projects/markdown/syntax</a></p>
]]></content>
  </entry>
  
</feed>
