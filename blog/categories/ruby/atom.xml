<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Viduslu]]></title>
  <link href="http://esrefv.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://esrefv.github.io/"/>
  <updated>2016-10-10T22:49:14+03:00</updated>
  <id>http://esrefv.github.io/</id>
  <author>
    <name><![CDATA[E. VIDUSLU]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails counter_cache Kullanımı]]></title>
    <link href="http://esrefv.github.io/blog/2016/10/10/rails-counter-cache-kullanimi/"/>
    <updated>2016-10-10T22:47:50+03:00</updated>
    <id>http://esrefv.github.io/blog/2016/10/10/rails-counter-cache-kullanimi</id>
    <content type="html"><![CDATA[<p>Bugünkü yazımda Rails'ta counter_cache kullanımından bahsedeceğim. Öncelikle belli bir sayısal değeri kullanmamıza ihtiyaç varsa her seferinde count ile saydırmak yerine bunu counter _cache yardımı ile tutturabileceğiz.</p>

<p>Kendi yaptığım proje üzerinden örnek vermem gerekirse. User ve Answer adında 2 modelim var. counter_cache kullanabilmemiz için 2 modelimizin arasında has_many, belogns_to ilişkisi olması gereklidir.</p>

<p>User modelim;</p>

<pre><code>class User &lt; ActiveRecord::Base
    has_many :answers
end
</code></pre>

<p>Answer modelim;</p>

<pre><code>class Answer &lt; ActiveRecord::Base
    belongs_to :user
end
</code></pre>

<p>şeklindedir.</p>

<p>Benim User'larımın birden çok Answer'ı olabilir. Answer içerindede User'ın online olup olmama durumunu, online offline olduğu saati ve buna benzer cevapları tutmaktayım.</p>

<p>Ben User'ıma ait cevapların sayını öğrenmem için</p>

<pre><code>@user.answers.count
@user.answers.size
@user.answer.lenght 
</code></pre>

<p>şeklinde veritabanını yoracak COUNT(*) sorguları yerine daha efektif bir çözüm olan counter_cache kullanmam daha doğru olacaktır.</p>

<p>Öncelikle Answer modelimizdeki user'ı,</p>

<pre><code>class Answer &lt; ActiveRecord::Base
    belongs_to :user, counter_cache: true
end
</code></pre>

<p>şeklinde counter_cache: true yapıyoruz.</p>

<p>Burada belongs_to modelimeze counter_cache: true demiş olmamıza rağmen, User modelimize yeni bir alan eklemek için migration oluşturmamız gerekiyor.</p>

<pre><code class="bash">$ rails g migration add_answers_sount_to_users    
</code></pre>

<p>Benim örneğimde görebileceğiniz gibi User modelimize answers_count eklememiz gerekiyor.</p>

<pre><code class="ruby">class AddAnswersCountToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :answers_count, :integer, :default =&gt; 0
  end
end
</code></pre>

<p>Daha sonra yeni oluşturduğumuz migration ımızı migrate etmeliyiz.
<code>bash
$ bundle exec rake db:migrate   
</code></p>

<p>Ve tamamdır. Her oluşacak yeni Answer'ımız hangi User'ımıza ait ise onun değerini 1 arttırıyor olacaktır. Bizde veritabanımızı yoracak COUNT(*) işlemi yerine.</p>

<pre><code>@user.answers_count
</code></pre>

<p>yazarak, model tarafından birek ulaşabileceğiz.</p>

<p>Okuduğunuz için teşekkürler</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cybele Kurulumu Nasıl Yapılır?]]></title>
    <link href="http://esrefv.github.io/blog/2016/09/26/cybele-kurulumu-nasil-yapilir/"/>
    <updated>2016-09-26T11:06:43+03:00</updated>
    <id>http://esrefv.github.io/blog/2016/09/26/cybele-kurulumu-nasil-yapilir</id>
    <content type="html"><![CDATA[<p>Cybele &ldquo;Ruby on Rails&rdquo; dünyasına yeni başlayanlar için(biride benim) çok kolay proje oluşturma ve user-admin arayüzleri sayesinde her şeyi daha rahat yönetebilmemize olanak sağlayan bir şablondur.</p>

<p>Kurulum aşamasından önce gerekli olan en düşük versiyon tipleri;</p>

<blockquote><p>Ruby  ~> 2.3</p>

<p>Rails ~> 4.2 &lsquo;dir.</p></blockquote>

<p>Eğer daha düşük bir versiyon kullanmaktaysanız öncelikle güncelleme yapmalısınız.</p>

<!-- more -->


<p>Öncelikle &ldquo;Cybele&rdquo; gem imizi indirmekle başlayalım.</p>

<pre><code class="bash">$ gem install cybele
</code></pre>

<p>Daha sonra ise indirdiğimiz &ldquo;Cybele&rdquo; ile proje oluşturmak için terminalimize</p>

<pre><code class="bash">$ cybele project_name
</code></pre>

<p>project_name yerine istediğimiz bir proje adını kullanabiliriz. Ben bu anlatımım sırasında adını &ldquo;cybele_test&rdquo; olarak kullanacağım.</p>

<pre><code class="bash">$ cybele cybele_test
</code></pre>

<p>diyerek projemizi oluşturmuş oluyoruz. Fakat öncelikle halletmemiz gereken bir kaç düzenleme daha var.</p>

<p>Oluşturduğumuz projemizin dizinine girerek rubymine, atom yada subl vb. ne kullanıyorsanız onunla projemizi açıyoruz.</p>

<p>cybele_test projemizin altında <strong>db/migrate</strong> klasörünün içerisinde bulunan <strong>devise_create_user</strong> ve <strong>devise_create_admin</strong> dosyalarında değiştirmemiz gereken alanlar bulunmakta.</p>

<pre><code class="ruby">t.boolean :is_active
t.string :time_zone
</code></pre>

<p>Her iki dosyanın içerisinde de yukarıdaki gibi bulunan <strong>is_active</strong> ve <strong>time_zone</strong> satırlarının,</p>

<pre><code class="ruby">t.boolean :is_active, default: true
t.string :time_zone, default: "UTC"
</code></pre>

<p>bu şekilde default değerlerini ayarlıyoruz.</p>

<p>Projemizin içerisindeki public klasörüne,</p>

<pre><code class="bash">$ cd public
</code></pre>

<p>yazarak ulaşıyoruz ve içerisinde aşağıdaki komutu çalıştırıyoruz.</p>

<pre><code class="bash">$ ln -s ../VERSION.txt VERSION.txt
</code></pre>

<p>Bu işlemide gerçekleştirdiysek sırada veritabanı işlemlerimizi gerçekleştirmek kaldı.</p>

<p>Projemizin config klasörünün altındaki database.yml uzantılı dosyamızı açıyoruz. <strong>(config/database.yml)</strong></p>

<pre><code class="ruby">development: &amp;default
adapter: postgresql
database: cybele_test_development
encoding: utf8
min_messages: warning
pool: 5
timeout: 5000
host: localhost
port: 5432
</code></pre>

<p>Yukarıdaki şekilde görünen development kısmımızın altına username ve password ekleyeceğiz.</p>

<pre><code class="ruby">development: &amp;default
adapter: postgresql
database: cybele_test_development
encoding: utf8
min_messages: warning
pool: 5
timeout: 5000
host: localhost
port: 5432
username: cybele_test
password: cybele_test
</code></pre>

<p>Postgresql'de bu klasörde gördüğümüz şekilde database isminin aynısını oluşturarak üzerine username ve password tanımlamam gerekiyor. Bunun için öncelikle;</p>

<pre><code class="bash">$ sudo -u postgres psql
</code></pre>

<p>kullanarak postgresql terminalini açıyoruz.</p>

<pre><code class="bash">$ CREATE DATABASE ‘cybele_test_development’;
</code></pre>

<p>Yazarak veri tabanımızı oluşturuyoruz. database.yml dosyamızda database ismimiz nasılsa öyle yazmamız gerekiyor.</p>

<pre><code class="bash">$ CREATE USER cybele_test PASSWORD 'cybele_test';
</code></pre>

<p>database.yml dosyamızda belirttiğimiz şekilde username ve password ümüzü tanımlıyoruz.</p>

<pre><code class="bash">$ ALTER USER cybele_test WITH SUPERUSER;
</code></pre>

<p>yazarak veri tabanı işlemlerimizi bitirmiş oluyoruz.</p>

<p>Son olarak yapmamız gereken ise aşağıdaki kodları sırasıyla terminalde çalıştırmak,</p>

<pre><code class="bash">$ bundle exec rake db:create
$ bundle exec rake db:migrate
$ budnle exec rake dev:seed
</code></pre>

<p>ve</p>

<pre><code class="bash">$ rails s
</code></pre>

<p>yazarak projemizi çalıştırmış oluyoruz. <a href="http://localhost:3000/">http://localhost:3000/</a> e giderek projemizin çalışan halini görebiliriz.</p>

<p>Başlangıçta belirttiğim gibi bir tanede Admin sayfamız bulunmakta. Admin olarak giriş yapmak için ise <a href="http://localhost:3000/hq">http://localhost:3000/hq</a> sayfasına gitmeniz gerekiyor.</p>

<p>Adminin e-posta ve parolası <strong>db/seeds.rb</strong> dosyasında yazıyor olacaktır.</p>

<p>Okuduğunuz için teşekkürler.</p>
]]></content>
  </entry>
  
</feed>
